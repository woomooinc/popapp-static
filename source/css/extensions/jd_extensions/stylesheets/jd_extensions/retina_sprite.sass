// Include compass sprite helpers
@import compass/utilities/sprites
// Include helper to calc background size
@import compass/css3/background-size

// The general purpose retina sprite mixin.
//
//    +retina-sprite(name, $spritemap1, $spritemap2)
//    +retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
//
//    If `dimensions` is true, then width/height will also be set.
//
//    if `pad` is non-zero, then that's how much padding the element will have (requires
//    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
//
=_retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0)
  // Development
  @if compass-env() == 'development'
    $file_path: last_folder_filename_path( sprite-file( $sprites, $name ))
    $file_path_hover: suffix_filename( $file_path, -hover )
    $file_path_active: suffix_filename( $file_path, -active )
    background-image: image-url( $file_path )
    background-repeat: no-repeat

    @if $dimensions == true
      width: +image-width( sprite-file( $sprites, $name ) )
      height: +image-height( sprite-file( $sprites, $name ) )

    @if $hover == true
      &:hover
        background-image: image-url( $file_path_hover )

    @if $active == true
      &:active
        background-image: image-url( $file_path_active )

  // Production
  @if compass-env() == 'production'
    background-image: sprite-url($sprites)
    background-position: sprite-position($sprites, $name, -$pad, -$pad)
    background-repeat: no-repeat

    @if $dimensions == true
      +sprite-dimensions($sprites, $name)

    @if $hover == true
      $name_hover: $name + -hover
      &:hover
        background-position: sprite-position($sprites, $name_hover, -$pad, -$pad)

    @if $active == true
      $name_active: $name + -active
      &:active
        background-position: sprite-position($sprites, $name_active, -$pad, -$pad)

    @if $pad > 0
      padding: $pad

    @media (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)
      $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2)
      background-image: sprite-url($sprites2x)
      background-position: nth($pos, 1) / 2 nth($pos, 2) / 2
      +background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto)
      //  sprite-path() returns the path of the generated sprite sheet, which
      //  image-width() calculates the width of. the ceil() is in place in case
      //  you have sprites that have an odd-number of pixels in width

      @if $hover == true
        $name_hover: $name + -hover    // create myButton_hover and assign it
        &:hover
          $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2)
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2

      @if $active == true
        $name_active: $name + -active    // create myButton_active and assign it
        &:active
          $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2)
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2

=_retina-sprite-before($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0)
  // Development
  @if compass-env() == 'development'
    $file_path: last_folder_filename_path( sprite-file( $sprites, $name ))
    $file_path_hover: suffix_filename( $file_path, -hover )
    $file_path_active: suffix_filename( $file_path, -active )

    &:before
      background-image: image-url( $file_path )
      background-repeat: no-repeat
      content: ''
      display: block

    @if $dimensions == true
      &:before
        width: +image-width( sprite-file( $sprites, $name ) )
        height: +image-height( sprite-file( $sprites, $name ) )

    @if $hover == true
      &:hover:before
        background-image: image-url( $file_path_hover )

    @if $active == true
      &:active:before
        background-image: image-url( $file_path_active )

  // Production
  @if compass-env() == 'production'
    &:before
      background-image: sprite-url($sprites)
      background-position: sprite-position($sprites, $name, -$pad, -$pad)
      background-repeat: no-repeat
      content: ''
      display: block

    @if $dimensions == true
      &:before
        +sprite-dimensions($sprites, $name)

    @if $hover == true
      $name_hover: $name + -hover
      &:hover:before
        background-position: sprite-position($sprites, $name_hover, -$pad, -$pad)

    @if $active == true
      $name_active: $name + -active
      &:active:before
        background-position: sprite-position($sprites, $name_active, -$pad, -$pad)

    @if $pad > 0
      padding: $pad

    @media (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)
      $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2)
      &:before
        background-image: sprite-url($sprites2x)
        background-position: nth($pos, 1) / 2 nth($pos, 2) / 2
        +background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto)
        //  sprite-path() returns the path of the generated sprite sheet, which
        //  image-width() calculates the width of. the ceil() is in place in case
        //  you have sprites that have an odd-number of pixels in width

      @if $hover == true
        $name_hover: $name + -hover    // create myButton_hover and assign it
        &:hover:before
          $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2)
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2

      @if $active == true
        $name_active: $name + -active    // create myButton_active and assign it
        &:active:before
          $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2)
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2